version: 2.1

orbs:
  docker: circleci/docker@2.8.2
  github: circleci/github-cli@2.7.0

jobs:
  build-linux:
    parameters:
      architecture:
        type: string
        default: amd64
      variant:
        type: string
        default: ""
      resource-class:
        type: string
        default: medium
      local-cache-prefix:
        type: string
        default: docker-buildx-localproxy
      local-cache-path:
        type: string
        default: /tmp/buildx-cache
    executor: docker/docker
    resource_class: << parameters.resource-class >>
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - << parameters.local-cache-prefix >>-{{ arch }}-{{ .Branch }}
            - << parameters.local-cache-prefix >>-{{ arch }}-
      - run:
          name: Set up environment variables
          command: |
            printf 'export ARCH="%s"\n' "<< parameters.architecture >>" >> $BASH_ENV
            printf 'export VARIANT="%s"\n' "<< parameters.variant >>" >> $BASH_ENV
      - run:
          name: Set up Docker Buildx context
          command: docker buildx create --name crossbuilder --use
      - docker/check:
          docker-username: DOCKER_USERNAME
      - docker/build:
          image: verdigristech/localproxy
          use-buildkit: true
          extra_build_args: |
            --platform="linux/$(printf '%s%s' "${ARCH}" "${VARIANT:+/$VARIANT}")"
            --progress=plain
            --cache-from=type=local,src=<< parameters.local-cache-path >>
            --cache-to=type=local,mode=max,dest=<< parameters.local-cache-path >>
            --output=type=tar,dest=localproxy-linux-${ARCH}${VARIANT}.tar
      - run:
          name: Compress the tarball into xz
          command: |
            xz -c localproxy-linux-<< parameters.architecture >><< parameters.variant >>.tar > localproxy-linux-<< parameters.architecture >><< parameters.variant >>.tar.xz
      - save_cache:
          paths:
            - << parameters.local-cache-path >>
          key: << parameters.local-cache-prefix >>-{{ arch }}-{{ .Branch }}-{{ checksum "<< parameters.local-cache-path >>/index.json" }}
      - run:
          name: Package build output as Debian package-debian
          command: |
            echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            sudo apt-get update
            sudo apt-get install -y nfpm
            export ARCH=<< parameters.architecture >><< parameters.variant >>

            # Override GOARCH so armv7 builds use GOARCH=arm7 instead of GOARCH=armv7
            if [ "$ARCH" = "armv7" ]; then
              GOARCH="arm7"
            else
              GOARCH="$ARCH"
            fi
            export GOARCH

            # Use the latest git tag as the version with v stripped out.
            # Some package managers, like deb, require the version to start with a digit.
            export VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')

            mkdir -p debian
            mkdir -p dist/localproxy-linux-${ARCH}

            tar -xvf localproxy-linux-<< parameters.architecture >><< parameters.variant >>.tar -C dist/localproxy-linux-${ARCH}
            nfpm pkg --packager deb --target debian/
      - store_artifacts:
          path: localproxy-linux-<< parameters.architecture >><< parameters.variant >>.tar.xz
      - store_artifacts:
          path: debian
      - persist_to_workspace:
          root: .
          paths:
            - localproxy-linux-<< parameters.architecture >><< parameters.variant >>.tar.xz

  build-mac:
    macos:
      xcode: "16.2.0"
    # Do not change to large! This is by far the most expensive resource class
    # macos.m1.medium.gen1 already uses 150 credits / min
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Install dependencies
          # TODO: openssl@1.1 is disabled in Homebrew
          command: brew install openssl@1.1 zlib cmake
      - run:
          name: Install Boost
          command: |
            curl -L https://sourceforge.net/projects/boost/files/boost/1.87.0/boost_1_87_0.tar.gz/download | tar xz -C /tmp/
            cd /tmp/boost_1_87_0
            ./bootstrap.sh --with-toolset=clang
            sudo ./b2 install toolset=clang link=static
      - run:
          name: Install Protobuf
          command: |
            curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protobuf-all-3.17.3.tar.gz | tar xz -C /tmp/
            cd /tmp/protobuf-3.17.3
            mkdir build_make
            cd build_make
            cmake ../cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=aarch64
            make
            sudo make install
      - run:
          name: Install OpenSSL 1.1.1
          command: |
            curl -L https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1u/openssl-1.1.1u.tar.gz | tar xz -C /tmp/
            cd /tmp/openssl-1.1.1u
            ./config --prefix=/usr/local/Cellar/openssl@1.1/1.1.1u/ --openssldir=/usr/local/Cellar/openssl@1.1/1.1.1u/
            make
            sudo make install
      - run:
          name: Build localproxy
          command: |
            mkdir build
            cd build
            cmake .. -DBUILD_TESTS=OFF -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1u/ -DOPENSSL_LIBRARIES=/usr/local/Cellar/openssl@1.1/1.1.1u/lib/ -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=aarch64
            make
      - store_artifacts:
          path: build

  package-debian:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: Install nFPM
          command: |
            echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            sudo apt-get update
            sudo apt-get install -y nfpm
      - run:
          name: Build Debian package for each architecture
          command: |
            mkdir -p debian
            for ARCH in amd64 arm64 armv7; do
              echo "Building Debian package for architecture: $ARCH"
              # Override GOARCH so armv7 builds use GOARCH=arm7 instead of GOARCH=armv7
              if [ "$ARCH" = "armv7" ]; then
                GOARCH="arm7"
              else
                GOARCH="$ARCH"
              fi
              export ARCH GOARCH
              mkdir -p dist/localproxy-linux-$ARCH
              tar -xvJf dist/localproxy-linux-$ARCH.tar.xz -C dist/localproxy-linux-$ARCH
              nfpm pkg --packager deb --target debian/
            done
      - store_artifacts:
          path: debian

  # create-github-release:
  #   docker:
  #     - image: cimg/base:current
  #   resource_class: small
  #   working_directory: /tmp
  #   steps:
  #     - attach_workspace:
  #         at: /tmp
  #     - github/install
  #     - run:
  #         name: Extract localproxy version
  #         command: |
  #           sudo tar -xvJf "localproxy-linux-amd64.tar.xz" -C /
  #           version=$(localproxy --version -h | sed -nE 's/.*version: ([^ ]+).*/\1/p')
  #           echo "Extracted version: $version"

workflows:
  release:
    jobs:
      # Linux builds
      - build-linux:
          context: dockerhub
          name: build-linux-amd64
          architecture: amd64
          resource-class: large
      - build-linux:
          context: dockerhub
          name: build-linux-arm64
          architecture: arm64
          resource-class: arm.large
      - build-linux:
          context: dockerhub
          name: build-linux-armv7
          architecture: arm
          variant: v7
          resource-class: arm.large

      # TODO: macOS build is not working yet
      # - build-mac

      # - package-debian:
      #     context: github
      #     requires:
      #       - build-linux-amd64
      #       - build-linux-arm64
      #       - build-linux-armv7

      # - create-github-release:
      #     context: github
      #     requires:
      #       - build-linux-amd64
      #       - build-linux-arm64
      #       - build-linux-armv7
